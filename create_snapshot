#! /usr/bin/env ruby
#
# Creates a new snapshot. Based on http://www.mikerubel.org/computers/rsync_snapshots/

require 'logger'
require 'fileutils'

class MultiIO
  def initialize(*targets)
     @targets = targets
  end

  def write(*args)
    @targets.each {|t| t.write(*args)}
  end

  def close
    @targets.each(&:close)
  end
end

LOG_FILE = File.expand_path("../backup.log", __FILE__)
BACKUP_ROOT = File.expand_path("../snapshots", __FILE__)
CURRENT_PATH = File.expand_path("../current", __FILE__)

# Backup target named for todays date.
SNAPSHOT_DATE = Time.now.strftime("%Y%m%d")
TARGET = File.expand_path("../snapshots/#{Time.now.strftime("%Y%m%d")}", __FILE__)
OPTIONS = "-avz --delete --delete-excluded"

$logger = Logger.new(MultiIO.new(STDOUT, File.open(LOG_FILE, "a")))

# Makes a linked copy of the previous copy to rsync to.
Dir.chdir(BACKUP_ROOT)
# Get directory name of most recent snap shot.
last_snapshot = Dir.glob("*").select {|f| File.directory? f }.select {|n| n =~ /^[0-9]{8}$/ }.sort.last

if last_snapshot
  unless last_snapshot == SNAPSHOT_DATE
    ## If found, and not one from today already, hard link it over to prepare for
    ## rsync.
    $logger.info "Hard linking most recent backup."
    $logger.info `cd "#{last_snapshot}" && find . -print | cpio -dpl "#{TARGET}"`

    # Update symlink
    FileUtils.rm CURRENT_PATH if File.exist? CURRENT_PATH
    File.symlink(TARGET, CURRENT_PATH)
  end
end
