#! /usr/bin/env ruby
#
# Initializes the backup media for backups. Based on http://www.mikerubel.org/computers/rsync_snapshots/

require 'logger'
require 'fileutils'

class MultiIO
  def initialize(*targets)
     @targets = targets
  end

  def write(*args)
    @targets.each {|t| t.write(*args)}
  end

  def close
    @targets.each(&:close)
  end
end

LOG_FILE = File.expand_path("../backup.log", __FILE__)
SNAPSHOT_ROOT = File.expand_path("../snapshots", __FILE__)
CURRENT_PATH = File.expand_path("../current", __FILE__)

# Backup target named for todays date.
SNAPSHOT_DATE = Time.now.strftime("%Y%m%d")
TARGET = File.expand_path("../snapshots/#{Time.now.strftime("%Y%m%d")}", __FILE__)
OPTIONS = "-avz --delete --delete-excluded"

$logger = Logger.new(MultiIO.new(STDOUT, File.open(LOG_FILE, "a")))


# Create snapshot root if it's not there.
unless File.exist? SNAPSHOT_ROOT
  FileUtils.mkdir SNAPSHOT_ROOT
end

# If snapshots is empty, seed with todays target.
if (Dir.entries(SNAPSHOT_ROOT) - %w{ . .. }).empty?
  FileUtils.mkdir TARGET
end

# Create and link current
unless File.exist? CURRENT_PATH
  File.symlink(TARGET, CURRENT_PATH)
end
